# SPDX-FileCopyrightText: 2024-2025 Univention GmbH
# SPDX-License-Identifier: AGPL-3.0-only
---
# The global properties are used to configure multiple charts at once.
global:
  # -- Container registry address.
  imageRegistry: "artifacts.software-univention.de"

  domain: ""
  subDomains:
    keycloak: ""
    portal: "portal"

  # -- Credentials to fetch images from private registry.
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  #
  # imagePullSecrets:
  #   - "docker-registry"
  #
  imagePullSecrets: []

# -- Additional custom annotations to add to all deployed objects.
additionalAnnotations: {}

# -- Additional custom labels to add to all deployed objects.
additionalLabels: {}

# -- Affinity for pod assignment.
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set.
affinity: {}

# Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  privileged: false
  # -- Enable container privileged escalation.
  allowPrivilegeEscalation: false

  # -- Security capabilities for container.
  capabilities:
    drop:
      - "ALL"

  # -- Enable security context.
  enabled: true

  # -- Process user id.
  runAsUser: 1000

  # -- Process group id.
  runAsGroup: 1000

  # Set Seccomp profile.
  seccompProfile:
    # -- Disallow custom Seccomp profile by setting it to RuntimeDefault.
    type: "RuntimeDefault"

  # -- Mounts the container's root filesystem as read-only.
  readOnlyRootFilesystem: true

  # -- Run container as a user.
  runAsNonRoot: true

# -- Array with extra environment variables to add to containers.
#
# extraEnvVars:
#   - name: FOO
#     value: "bar"
#
extraEnvVars: []

# -- Optionally specify an extra list of additional volumes.
extraVolumes: []

# -- Optionally specify an extra list of additional volumeMounts.
extraVolumeMounts: []

# -- Provide a name to substitute for the full names of resources.
fullnameOverride: ""

# Container image section.
image:
  # -- Container registry address. This setting has higher precedence than global.registry.
  registry: ""

  # -- Container repository string.
  repository: "nubus-dev/images/intercom-service"

  # -- Define an ImagePullPolicy.
  #
  # Ref.: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
  #
  # "IfNotPresent" => The image is pulled only if it is not already present locally.
  # "Always" => Every time the kubelet launches a container, the kubelet queries the container image registry to
  #             resolve the name to an image digest. If the kubelet has a container image with that exact digest cached
  #             locally, the kubelet uses its cached image; otherwise, the kubelet pulls the image with the resolved
  #             digest, and uses that image to launch the container.
  # "Never" => The kubelet does not try fetching the image. If the image is somehow already present locally, the
  #            kubelet attempts to start the container; otherwise, startup fails.
  #
  imagePullPolicy: "IfNotPresent"

  # -- Define image tag.
  tag: "latest"

# -- Credentials to fetch images from private registry.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
# imagePullSecrets:
#   - "docker-registry"
#
imagePullSecrets: []

# Provide intercom service specific settings:
ics:
  session:
    # -- The secret used to derive an encryption key for the user identity in a
    # stateless session cookie, to sign the transient cookies used by the login
    # callback and to sign the custom session store cookies
    secret: null
    existingSecret:
      # -- The name of an existing Secret to use for retrieving the Intercom Service secret.
      name: null
      keyMapping:
        # -- The key to retrieve the Intercom Service secret from the secret.
        # Setting this value allows to use a key with a different name.
        secret: null

  # -- Base URL of issuer.
  issuerBaseUrl: ""

  # -- Origin Regex settings. The originRegex is used to validate the origin of the
  # incoming requests. If the origin does not match the regex, ICS will not handle
  # CORS correctly and will not set Access-Control-Allow-Origin header in
  # the proxied request.
  originRegex: ""

  # -- Proxy settings.
  proxy: false

  # -- Enable session cookie (transient cookie). If enabled, the session cookie
  # will be deleted at the end of the browser session. Otherwise, the session
  # will be a rolling session (reset every time the user is active).
  enableSessionCookie: false

  # -- Rolling session duration in seconds. The session will be reset if the user
  # is active within the duration. Otherwise, the user will be logged out,
  # requiring a silent login. If `enableSessionCookie` is set to true, this
  # setting will be ignored.
  sessionRollingDuration: 86400

  # -- Log level.
  logLevel: "INFO"

  # -- Mapper claim name for the Intercom Service client. The field must be
  # unique along users. If not set, the default value is "entryuuid", which is
  # provisioned by the Intercom Service initContainer. Any other value that
  # "entryuuid" is not guaranteed to be unique on Nubus.
  userUniqueMapper: "entryuuid"

  # -- ID Token claim that contains the username for a user. Needs to be
  # configured in Keycloak.
  usernameClaim: "phoenixusername"

  # -- Default settings which are used for all services if they are not overriden
  # for a specific service.
  default:
    # -- Domain which will be added for all subdomains for apps. It will be
    # overriden by the specific service settings if set.
    domain: "example.com"

    # -- Protocol which will be used to connect to apps. It will be overriden by
    # the specific service settings if set.
    protocol: "https"

  # Intercom Service OIDC settings.
  oidc:
    # -- OIDC ClientID.
    id: "intercom"

    # -- OIDC Client Secret
    # Either this value or an existing Secret has to be specified.
    clientSecret: null
    existingSecret:
      # -- The name of an existing Secret to use for retrieving the OIDC client secret.
      name: null
      keyMapping:
        # -- The key to retrieve the application service secret from the secret.
        # Setting this value allows to use a key with a different name.
        clientSecret: null


  # Keycloak connection settings.
  keycloak:
    enabled: true

    # -- Subdomain with "ics.default.protocol" and "ics.default.domain".
    # Mutual exclusive with "url".
    subdomain: "id"

    # -- URL as FQDN.
    # Mutual exclusive with "subdomain".
    url: ""

    # -- Configured Realm for authentication.
    realm: "souvap"

  # Matrix connection settings.
  matrix:
    # -- Enable Matrix.
    enabled: true

    # -- Subdomain with "ics.default.protocol" and "ics.default.domain".
    # Mutual exclusive with "url".
    subdomain: "matrix"

    # -- URL as FQDN.
    # Mutual exclusive with "subdomain".
    url: ""

    # -- Name of matrix server.
    serverName: "matrix"

    auth:
      # -- Application Service secret.
      # Either this value or an existing Secret has to be specified.
      applicationServiceSecret: null
      existingSecret:
        # -- The name of an existing Secret to use for retrieving the Matrix
        # application service secret.
        name: null
        keyMapping:
          # -- The key to retrieve the application service secret from the secret.
          # Setting this value allows to use a key with a different name.
          password: null

  # Nordeck's meeting widget bot connection settings.
  nordeck:
    # -- Enable Nordeck's meeting widget bot.
    enabled: true

    # -- Widget mode.
    mode: "test"

    # -- Subdomain with "ics.default.protocol" and "ics.default.domain".
    # Mutual exclusive with "url".
    subdomain: "meetings-widget-bot"

    # -- URL as FQDN.
    # Mutual exclusive with "subdomain".
    url: ""

  # Univention Portal connection settings.
  portal:
    # -- Enable Univention Portal integration.
    enabled: true

    # -- Subdomain with "ics.default.protocol" and "ics.default.domain".
    # Mutual exclusive with "url".
    subdomain: "portal"

    # -- Origin of Univention Portal as FQDN.
    # Mutual exclusive with "subdomain".
    url: ""

    auth:
      # -- Portal Server shared secret used to retrieve the `navigation.json`
      # for a given user. This requires the portal server central navigation to
      # be enabled.
      # Either this value or an existing Secret has to be specified.
      sharedSecret: null
      existingSecret:
        # -- The name of an existing Secret to use for retrieving the shared secret
        # to use with the Portal Server.
        name: null
        keyMapping:
          # -- The key to retrieve the shared secret from the secret.
          # Setting this value allows to use a key with a different name.
          sharedSecret: null

  # -- Nextcloud file service connection settings.
  nextcloud:
    # -- Enable Nextcloud integration.
    enabled: true

    # -- Origin of nextcloud with "ics.default.protocol" and "ics.default.domain".
    # Mutual exclusive with "originUrl".
    origin: "fs"

    # -- Origin of Nextcloud as FQDN.
    # Mutual exclusive with "origin".
    originUrl: ""

    # -- Subdomain of Nextcloud with "ics.default.protocol" and "ics.default.domain".
    # Mutual exclusive with "url".
    subdomain: "fs"

    # -- URL of Nextcloud as FQDN.
    # Mutual exclusive with "subdomain".
    url: ""

    # -- Audience.
    audience: "ncoidc"

  # -- XWiki connection settings.
  xwiki:
    # -- Enable XWiki integration.
    enabled: true

    # -- Subdomain of XWiki with "ics.default.protocol" and "ics.default.domain".
    # Mutual exclusive with "url".
    subdomain: "wiki"

    # -- URL of XWiki as FQDN.
    # Mutual exclusive with "subdomain".
    url: ""

    # -- Audience. The audience is the target client ICS will request tokens for
    # when using Token Exchange. More information at https://www.keycloak.org/securing-apps/token-exchange
    audience: "xwikioidc"

  # Redis related settings.
  redis:
    # -- Redis cache service host.
    host: "redis-headless"

    # -- Redis cache service port.
    port: "6379"


    auth:
      # -- Redis cache service username.
      username: ""

      # -- Redis cache service password.
      # Either this value or an existing Secret has to be specified.
      password: null
      existingSecret:
        # -- The name of an existing Secret to use for retrieving the password
        # to use with the Redis cache service.
        name: null
        keyMapping:
          # -- The key to retrieve the password from the secret.
          # Setting this value allows to use a key with a different name.
          password: null

    ssl:
      # -- Enable Redis SSL connection
      enabled: false

      # -- Optional. Path to the Redis custom CA
      pathCA: "/etc/ssl/certs/redis-custom-CA.pem"

      # -- CustomCA certificate for Redis connection
      customca: ""

      # -- Optional configuration of mutual TLS. The following
      # values are required in that case, clientCert and clientKey or a tls secret containing both.
      mTLS:
        # -- Enable Redis SSL connection using mTLS
        enabled: false

        # -- Client certificate for the Redis connection
        clientCert: ""

        # -- Client key for the Redis connection
        clientKey: ""

        existingSecret:
          # -- Name of the secret that contains the client tls.crt and tls.key
          name: "intercom-service-redis-client-credentials"

# Define and create Kubernetes Ingress.
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- Enable creation of Ingress.
  enabled: true

  # -- The Ingress controller class name.
  ingressClassName: "nginx"

  # -- Define custom ingress annotations.
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /
  annotations: {}

  # -- Define the Fully Qualified Domain Name (FQDN) where application should be reachable.
  host: "ics.example.com"

  # -- Define the Ingress path.
  path: "/"

  # -- Each path in an Ingress is required to have a corresponding path type.
  # Paths that do not include an explicit pathType will fail validation.
  # There are three supported path types:
  #
  # "ImplementationSpecific" => With this path type, matching is up to the IngressClass. Implementations can treat this
  #                             as a separate pathType or treat it identically to Prefix or Exact path types.
  # "Exact" => Matches the URL path exactly and with case sensitivity.
  # "Prefix" => Matches based on a URL path prefix split by /.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types
  pathType: "Prefix"

  # -- Secure an Ingress by specifying a Secret that contains a TLS private key and certificate.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
    # -- Enable TLS/SSL/HTTPS for Ingress.
    enabled: true

    # -- The name of the kubernetes secret which contains a TLS private key and certificate.
    # Hint: This secret is not created by this chart and must be provided.
    secretName: ""

# -- Lifecycle to automate configuration before or after startup.
lifecycleHooks: {}

# -- String to partially override release name.
nameOverride: ""

# -- Node labels for pod assignment.
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

#  Configure extra options for containers probes.
livenessProbe:
  # -- Enables kubernetes LivenessProbe.
  enabled: true
  # -- Number of failed executions until container is terminated.
  failureThreshold: 3
  # -- Delay after container start until LivenessProbe is executed.
  initialDelaySeconds: 15
  # -- Time between probe executions.
  periodSeconds: 5
  # -- Number of successful executions after failed ones until container is marked healthy.
  successThreshold: 1
  # -- Timeout for command return.
  timeoutSeconds: 2

# -- Pod Annotations.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# -- Pod Labels.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# Pod Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  # -- Enable security context.
  enabled: true

  # -- If specified, all processes of the container are also part of the supplementary group.
  fsGroup: 1000

  # -- Change ownership and permission of the volume before being exposed inside a Pod.
  fsGroupChangePolicy: "Always"

#  Configure extra options for containers probes.
readinessProbe:
  # -- Enables kubernetes ReadinessProbe.
  enabled: true
  # -- Delay after container start until ReadinessProbe is executed.
  initialDelaySeconds: 5
  # -- Number of failed executions until container is terminated.
  failureThreshold: 15
  # -- Time between probe executions.
  periodSeconds: 2
  # -- Number of successful executions after failed ones until container is marked healthy.
  successThreshold: 1
  # -- Timeout for command return.
  timeoutSeconds: 1

# -- Set the amount of replicas of deployment.
replicaCount: 1

# Configure resource requests and limits.
#
# Ref: https://kubernetes.io/docs/user-guide/compute-resources/
resources:
  requests:
    # -- The number of RAM which has to be available on the scheduled node.
    memory: "32Mi"
    # -- The number of CPUs which has to be available on the scheduled node.
    cpu: "10m"
  limits:
    # -- The max number of RAM to consume.
    memory: "128Mi"
    # -- The max number of CPUs to consume.
    cpu: "500m"

# Define and create Kubernetes Service.
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/service
service:
  # -- Additional custom annotations.
  annotations: {}

  # -- Enable kubernetes service creation.
  enabled: true

  # "ClusterIP" => Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable
  #                from within the cluster. This is the default that is used if you don't explicitly specify a type for
  #                a Service.
  # "NodePort" => Exposes the Service on each Node's IP at a static port (the NodePort). To make the node port
  #               available, Kubernetes sets up a cluster IP address, the same as if you had requested a Service of
  #               type: ClusterIP.
  # "LoadBalancer" => Exposes the Service externally using a cloud provider's load balancer.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types

  # -- Choose the kind of Service, one of "ClusterIP", "NodePort" or "LoadBalancer".
  type: "ClusterIP"

  # Define the ports of Service.
  # You can set the port value to an arbitrary value, it will map the container port by name.
  ports:
    http:
      # -- Internal port.
      containerPort: 8008
      # -- Accessible port.
      port: 8008
      # -- service protocol.
      protocol: "TCP"

  # -- Configure session affinity for to hit the same backend for the period specified in `timeoutSeconds`.
  #
  # Ref.: https://kubernetes.io/docs/reference/networking/virtual-ips/#session-affinity
  sessionAffinity:
    # -- Whether to enable session affinity or not.
    enabled: false

    # -- The session duration in seconds.
    timeoutSeconds: 10800

# Service account to use.
# Ref.: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- Additional custom annotations for the ServiceAccount.
  annotations: {}

  # -- Allows auto mount of ServiceAccountToken on the serviceAccount created. Can be set to false if pods using this
  # serviceAccount do not need to use K8s API.
  automountServiceAccountToken: false

  # -- Enable creation of ServiceAccount for pod.
  create: true

  # -- Additional custom labels for the ServiceAccount.
  labels: {}

# -- In seconds, time the given to the pod needs to terminate gracefully.
# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
terminationGracePeriodSeconds: ""

# -- Tolerations for pod assignment.
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# -- Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
#
# topologySpreadConstraints:
#   - maxSkew: 1
#     topologyKey: failure-domain.beta.kubernetes.io/zone
#     whenUnsatisfiable: DoNotSchedule
topologySpreadConstraints: []

# Set up update strategy.
#
# Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
#
# Example:
# updateStrategy:
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
updateStrategy:
  # -- Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to make sure the pods
  # are destroyed first.
  type: "RollingUpdate"

# -- The Intercom Service Keycloak provisioning job
provisioning:

  # -- Enable keycloak provisioning by default.
  enabled: true

  image:
    imagePullSecrets: []

    registry: "artifacts.software-univention.de"
    repository: "nubus-dev/images/wait-for-dependency"
    tag: "0.30.0-pre-jtorres-521-upgrade"
    # -- Define image sha256 as an alternative to `tag`
    # sha256: null

  provisioningImage:
    imagePullSecrets: []

    registry: "artifacts.software-univention.de"
    repository: "nubus-dev/images/keycloak-bootstrap"
    tag: "0.11.0-pre-jtorres-521-upgrade"
    imagePullPolicy: "IfNotPresent"

  config:
    # -- Base URL for setting in Keycloak client URL without backslash.
    # Example: "https://ics.uv-jtorres-dev.gaia.open-desk.cloud"
    clientBaseUrl: ""
    # -- Keycloak specific settings.
    keycloak:
      # -- Keycloak realm.
      realm: "nubus"
      # -- Connection parameters.
      connection:
        # -- Keycloak protocol.
        protocol: "http"
        # -- Keycloak host.
        host: ""
        # -- Keycloak port.
        port: ""
      auth:
        # -- Keycloak admin user.
        username: "kcadmin"
        # -- Keycloak admin password.
        password: ""
        existingSecret:
          # -- The name of an existing Secret to use for retrieving the Keycloak admin password.
          name: ""
          keyMapping:
            # -- The key to retrieve the Keycloak admin password from the secret.
            # Setting this value allows to use a key with a different name.
            password: ""

    # Debugging related settings
    debug:
      # -- Enable debug output of included Ansible scripts
      enabled: false
      # -- Seconds for the job to pause before starting the actual bootstrapping.
      pauseBeforeScriptStart: 0

  # -- Optionally specify an extra list of additional volumeMounts.
  extraVolumeMounts: []

  # -- Array with extra environment variables to add to containers.
  #
  # extraEnvVars:
  #   - name: FOO
  #     value: "bar"
  extraEnvVars: []

  securityContext:
    privileged: false
    # -- Enable container privileged escalation.
    allowPrivilegeEscalation: false

    # -- Security capabilities for container.
    capabilities:
      drop:
        - "ALL"

    # -- Enable security context.
    enabled: true

    # -- Process user id.
    runAsUser: 1000

    # -- Process group id.
    runAsGroup: 1000

    # Set Seccomp profile.
    seccompProfile:
      # -- Disallow custom Seccomp profile by setting it to RuntimeDefault.
      type: "RuntimeDefault"

    # -- Mounts the container's root filesystem as read-only.
    readOnlyRootFilesystem: true

    # -- Run container as a user.
    runAsNonRoot: true

...
