# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH

{{- if .Values.provisioning.enabled }}
---

apiVersion: "v1"
kind: ConfigMap
metadata:
  name: {{ printf "%s-provisioning-init" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.provisioning.extraLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.extraLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.provisioning.extraAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.extraAnnotations "context" . ) | nindent 4 }}
  {{- end }}

data:
  KEYCLOAK_URL: {{ printf "%s://%s:%s/realms/%s" .Values.provisioning.config.keycloak.connection.protocol .Values.provisioning.config.keycloak.connection.host .Values.provisioning.config.keycloak.connection.port .Values.provisioning.config.keycloak.realm }}
  wait-for-keycloak.py: |
    #!/usr/bin/python3
    import requests
    import time
    import sys
    import os

    keycloak_url = os.environ.get('KEYCLOAK_URL')
    max_retries = 60
    retries = 0

    while True:
        try:
            response = requests.get(keycloak_url)
            if response.status_code == 200:
                print('Keycloak is available')
                sys.exit(0)
            elif response.status_code == 404:
                print('Realm not ready')
                pass
        except requests.exceptions.ConnectionError:
            print('Could not reach keycloak, retrying...')
            pass
        time.sleep(1)

...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-provisioning-env" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.provisioning.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.provisioning.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.provisioning.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  DEBUG: {{ .Values.provisioning.config.debug.enabled | quote }}
  DOMAIN: {{ .Values.global.domain | quote }}
  KEYCLOAK_USERNAME: {{ required "A Keycloak admin username must be specified" .Values.provisioning.config.keycloak.auth.username }}
  KEYCLOAK_HOST: {{ required ".Values.provisioning.config.keycloak.connection.host must be defined." .Values.provisioning.config.keycloak.connection.host }}
  KEYCLOAK_REALM: {{ required "A Keycloak realm must be specified to provision the intercom-service client" .Values.provisioning.config.keycloak.realm  }}
  KEYCLOAK_URL: {{ required "Keycloak baseUrl must be specified if Intercom Service provisioning is enabled" .Values.provisioning.config.keycloak.connection.baseUrl }}
  UNIVENTION_KEYCLOAK_BOOTSTRAP_TEMP_DIR: "/tmp"
  UNIVENTION_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START: {{ .Values.provisioning.config.debug.pauseBeforeScriptStart  | quote }}
  KEYCLOAK_APP_BASE_URL: {{ required ".Values.provisioning.config.clientBaseUrl is required" .Values.provisioning.config.clientBaseUrl }}
...

{{- end }}
